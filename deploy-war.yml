---
- name: Deploy WAR file to AWS EC2 instances
  hosts: appservers
  become: yes
  vars:
    war_file: target/ROOT.war
    tomcat_version: 9.0.109
    tomcat_install_dir: /opt/tomcat
    tomcat_service: tomcat

  tasks:

    # - name: Update apt cache (Debian/Ubuntu)
    #   apt:
    #     update_cache: yes
    #   when: ansible_os_family == "Debian"

    # - name: Install Java (required for Tomcat)
    #   package:
    #     name: openjdk-11-jre-headless
    #     state: present

    # - name: Create tomcat group
    #   group:
    #     name: tomcat

    # - name: Create tomcat user
    #   user:
    #     name: tomcat
    #     shell: /bin/false
    #     group: tomcat
    #     home: "{{ tomcat_install_dir }}"

    # - name: Download Tomcat
    #   get_url:
    #     url: "https://downloads.apache.org/tomcat/tomcat-9/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
    #     dest: /tmp/apache-tomcat.tar.gz
    # - name: Create install directory
    #   file:
    #     path: "{{ tomcat_install_dir }}"
    #     state: directory
    #     owner: tomcat
    #     group: tomcat

    # - name: Extract Tomcat
    #   unarchive:
    #     src: /tmp/apache-tomcat.tar.gz
    #     dest: "{{ tomcat_install_dir }}"
    #     remote_src: yes
    #     creates: "{{ tomcat_install_dir }}/apache-tomcat-{{ tomcat_version }}"

    # - name: Symlink latest Tomcat
    #   file:
    #     src: "{{ tomcat_install_dir }}/apache-tomcat-{{ tomcat_version }}"
    #     dest: "{{ tomcat_install_dir }}/latest"
    #     state: link

    # - name: Change ownership of Tomcat
    #   file:
    #     path: "{{ tomcat_install_dir }}"
    #     state: directory
    #     owner: tomcat
    #     group: tomcat
    #     recurse: yes

    # - name: Create systemd service for Tomcat
    #   copy:
    #     dest: /etc/systemd/system/tomcat.service
    #     content: |
    #       [Unit]
    #       Description=Apache Tomcat Web Application Container
    #       After=network.target

    #       [Service]
    #       Type=forking

    #       User=tomcat
    #       Group=tomcat

    #       Environment="JAVA_HOME=/usr/lib/jvm/jre"
    #       Environment="CATALINA_HOME={{ tomcat_install_dir }}/latest"
    #       Environment="CATALINA_BASE={{ tomcat_install_dir }}/latest"
    #       Environment="CATALINA_PID={{ tomcat_install_dir }}/latest/temp/tomcat.pid"
    #       Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

    #       ExecStart={{ tomcat_install_dir }}/latest/bin/startup.sh
    #       ExecStop={{ tomcat_install_dir }}/latest/bin/shutdown.sh

    #       Restart=on-failure

    #       [Install]
    #       WantedBy=multi-user.target

    # - name: Reload systemd daemon
    #   systemd:
    #     daemon_reload: yes

    # - name: Ensure Tomcat is started
    #   service:
    #     name: "{{ tomcat_service }}"
    #     state: started
    #     enabled: yes

    # - name: Stop Tomcat before deployment
    #   service:
    #     name: "{{ tomcat_service }}"
    #     state: stopped

    - name: Deploy WAR file
      copy:
        src: "{{ war_file }}"
        dest: "{{ tomcat_install_dir }}/latest/webapps/ROOT.war"
        owner: tomcat
        group: tomcat
        mode: '0644'

    # - name: Start Tomcat after deployment
    #   service:
    #     name: "{{ tomcat_service }}"
    #     state: started

    # - name: Wait for app to become available
    #   uri:
    #     url: "http://{{ inventory_hostname }}:8080/ROOT/"
    #     status_code: 200
    #   register: app_status
    #   retries: 10
    #   delay: 5
    #   until: app_status.status == 200
